
// These properties are not reflected in the logger output below if they
// appear after the 'logger.info' statements in this file.
// These statements are settings properties on the 'Project' interface object.
group 'com.jimtough'
version '1.0-SNAPSHOT'

//-----------------------------------------------------------------------------

logger.info "build.gradle | EXECUTED"

// build.gradle delegates to the 'Project' interface object. We can refer to it explicitly, as seen below...
//logger.info "build.gradle | project.gradle.gradleVersion: $project.gradle.gradleVersion"
// ...but the Project interface properties are also implicitly available
logger.info "build.gradle | gradle.gradleVersion: $gradle.gradleVersion"
logger.info "build.gradle | gradle.gradleHomeDir: $gradle.gradleHomeDir"
logger.info "build.gradle | gradle.gradleUserHomeDir: $gradle.gradleUserHomeDir"
logger.info "build.gradle | buildFile: $buildFile"
logger.info "build.gradle | projectDir: $projectDir"
// Example of using a Project interface method: relativePath()
logger.info "build.gradle | relativePath(buildFile): ${relativePath(buildFile)}"

// REFERENCE - API docs for the Project interface object
// https://docs.gradle.org/current/dsl/org.gradle.api.Project.html
logger.info "build.gradle | buildDir: $buildDir"
logger.info "build.gradle | defaultTasks: $defaultTasks"
logger.info "build.gradle | group: $group"
logger.info "build.gradle | name: $name"
logger.info "build.gradle | version: $version"
logger.info "build.gradle | status: $status"

/*
multiline
comment
*/

// Multiline string output
logger.info """
******************************************************************************
Using Gradle $gradle.gradleVersion - http://www.gradle.org
Gradle home is set to: $gradle.gradleHomeDir
Gradle user directory is set to: $gradle.gradleUserHomeDir

Base directory: $projectDir
Running script  ${relativePath(buildFile)}
******************************************************************************
"""

//-----------------------------------------------------------------------------
// Getting the properties I set in my 'gradle.properties' file.
// Looks like I can reference them directly from this context (build.gradle / Project interface)
logger.info "--------------------------------------"
logger.info "Values from my gradle.properties file:"
logger.info "--------------------------------------"
logger.info "foo: [$foo]"
logger.info "hello: [$hello]"
logger.info "myKey: [$myKey]"
// Can use the 'hasProperty()' function explicitly via 'project', or implicitly from build.gradle
//logger.info "Has property 'foo'?: ${project.hasProperty('foo')}"
logger.info "Has property 'foo'?: ${hasProperty('foo')}"
logger.info "Has property 'bogus'?: ${hasProperty('bogus')}"
logger.info "--------------------------------------"

// Execute conditional code based on existence of a property
if( hasProperty('foo') ) {
	logger.info "The property 'foo' (from gradle.properties) has value [$foo]"
}else{
	logger.warn "The property 'foo' is not defined!"
}
if( hasProperty('bogus') ) {
	logger.info "The property 'bogus' (from gradle.properties) has value [$bogus]"
}else{
	logger.warn "The property 'bogus' is not defined!"
}

project.ext.hellooo = "World"
if( hasProperty('hellooo') ) {
	logger.info hellooo
	logger.info "The (extra) property 'hellooo' has value [$hellooo]"
}else{
	logger.warn "The property 'hellooo' is not defined!"
}

// Check is Closure property is defined, then execute it
if( project.gradle.hasProperty('timestamp') ) {
	logger.info "The (Closure) property 'gradle.timestamp' evaluates to: [${gradle.timestamp()}]"
}else{
	logger.warn "The property 'gradle.timestamp' is not defined!"
}
// Alternate way to do this
if( project.gradle.ext.has('timestamp') ) {
	logger.info "The (Closure) property 'gradle.ext.timestamp' evaluates to: [${gradle.timestamp()}]"
}else{
	logger.warn "The property 'gradle.ext.timestamp' is not defined!"
}
